// Generated by CoffeeScript 1.4.0
(function() {
  var $, SassaFrazzlerClient;

  $ = jQuery;

  this.SassaFrazzlerClient = SassaFrazzlerClient = (function() {

    SassaFrazzlerClient.prototype.hierarchy = null;

    SassaFrazzlerClient.prototype.filtered_hierarchy = {};

    SassaFrazzlerClient.prototype.config = null;

    function SassaFrazzlerClient(config) {
      this.config = config;
      this.hierarchy = this.MakeList($('body'));
      this.FilterByConfig();
      this.CleanUp();
    }

    SassaFrazzlerClient.prototype.GetFullPageHierarchy = function() {
      return this.hierarchy;
    };

    SassaFrazzlerClient.prototype.CleanUp = function() {
      var hierarchy_info;
      hierarchy_info = {
        node: this.hierarchy,
        key: void 0,
        ancestry: void 0
      };
      hierarchy_info = this.CleanUpTraverse(hierarchy_info);
      return this.hierarchy = hierarchy_info.node;
    };

    SassaFrazzlerClient.prototype.CleanUpTraverse = function(hierarchy_info) {
      var key, node_hierarchy_info;
      for (key in hierarchy_info.node) {
        node_hierarchy_info = {
          node: hierarchy_info.node[key],
          key: key,
          ancestry: hierarchy_info
        };
        node_hierarchy_info = this.CleanUpTraverse(node_hierarchy_info);
        hierarchy_info.node[key] = node_hierarchy_info.node;
      }
      return this.CleanUpNode(hierarchy_info);
    };

    SassaFrazzlerClient.prototype.CleanUpNode = function(hierarchy_info) {
      var key, nameless_node, new_hierarchy_info, new_node, sorted, _i, _len;
      if ((hierarchy_info.node != null) && (hierarchy_info.node[""] != null)) {
        console.log(JSON.stringify(hierarchy_info.node[""]));
        console.log(JSON.stringify(hierarchy_info.ancestry));
        nameless_node = $.extend(true, {}, hierarchy_info.node[""]);
        delete hierarchy_info.node[""];
        new_node = $.extend(true, {}, hierarchy_info.node, nameless_node);
        hierarchy_info.node = new_node;
      }
      sorted = [];
      for (key in hierarchy_info.node) {
        sorted[sorted.length] = key;
      }
      sorted.sort();
      new_hierarchy_info = {
        node: {},
        key: hierarchy_info.key,
        ancestry: hierarchy_info.ancestry
      };
      for (_i = 0, _len = sorted.length; _i < _len; _i++) {
        key = sorted[_i];
        new_hierarchy_info.node[key] = hierarchy_info.node[key];
      }
      return new_hierarchy_info;
    };

    SassaFrazzlerClient.prototype.FilterByConfig = function() {
      this.filtered_hierarchy = this.hierarchy;
      this.filtered_hierarchy = this.FilterRooted(this.filtered_hierarchy);
      return this.filtered_hierarchy;
    };

    SassaFrazzlerClient.prototype.FilterRooted = function(hierarchy) {
      var key, value;
      for (key in hierarchy) {
        value = hierarchy[key];
        if (this.IsRooted(key)) {
          this.filtered_hierarchy[key] = this.filtered_hierarchy[key] != null ? $.extend(true, this.filtered_hierarchy[key], value) : value;
          if ((this.config.settings["keep-rooted-stubs"] != null) && this.config.settings["keep-rooted-stubs"] === "1") {
            hierarchy[key] = void 0;
          } else {
            delete hierarchy[key];
          }
        } else {
          for (key in hierarchy) {
            value = hierarchy[key];
            hierarchy[key] = this.FilterRooted(value);
          }
        }
      }
      return hierarchy;
    };

    SassaFrazzlerClient.prototype.IsRooted = function(full_selectors) {
      var full_selector, rooted_selector, selector_part, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      _ref = full_selectors.split(",");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        full_selector = _ref[_i];
        _ref1 = full_selector.trim().split(".");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          selector_part = _ref1[_j];
          _ref2 = this.config.rooted_selectors;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            rooted_selector = _ref2[_k];
            if (rooted_selector.replace(new RegExp("^[\.]+"), "") === selector_part) {
              return true;
            }
          }
        }
      }
      return false;
    };

    SassaFrazzlerClient.prototype.CSSClassify = function(cls) {
      if (cls === void 0) {
        return "";
      }
      if (cls.trim() === "") {
        return "";
      }
      while (-1 < cls.indexOf("  ")) {
        cls = cls.replace("  ", " ");
      }
      while (-1 < cls.indexOf(" ")) {
        cls = cls.replace(" ", ".");
      }
      return "." + cls;
    };

    SassaFrazzlerClient.prototype.MakeList = function(element) {
      var cls, el, id, key, keys, list, tag, _i, _len, _ref, _ref1, _this;
      _this = this;
      list = {};
      tag = this.config.settings["ignore-tags"] === "1" ? "" : $(element).prop('tagName');
      cls = this.CSSClassify($(element).attr('class'));
      id = $(element).attr('id');
      keys = [];
      if ((id != null) && id !== "") {
        keys.push("" + tag + "#" + id);
      }
      if ((cls != null) && cls !== "") {
        keys.push("" + tag + cls);
      }
      key = keys.join(", ");
      list[key] = (_ref = list[key]) != null ? _ref : {};
      _ref1 = $(element).children();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        list[key] = $.extend(true, list[key], this.MakeList(el));
      }
      return list;
    };

    return SassaFrazzlerClient;

  })();

}).call(this);
