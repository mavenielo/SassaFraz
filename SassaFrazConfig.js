// Generated by CoffeeScript 1.4.0
(function() {
  var SassaFrazConfig, eol, fs, system;

  fs = require("fs");

  system = require("system");

  eol = system.os.name === 'windows' ? "\r\n" : "\n";

  SassaFrazConfig = (function() {

    SassaFrazConfig.prototype.keywords = ["settings:", "pages:", "import:", "rooted-selectors:", "css-bases:", "based-on:"];

    SassaFrazConfig.prototype.settings = {
      "ignore-tags": "0",
      "rooted-file": "rooted.scss"
    };

    SassaFrazConfig.prototype.pages = [];

    SassaFrazConfig.prototype["import"] = [];

    SassaFrazConfig.prototype.rooted_selectors = [];

    SassaFrazConfig.prototype.css_bases = [];

    SassaFrazConfig.prototype.based_on = [];

    SassaFrazConfig.prototype.bases = {};

    function SassaFrazConfig(path) {
      var content, f;
      try {
        f = fs.open(path, "r");
        content = f.read();
        f.close();
      } catch (e) {
        console.log(e);
      }
      if (content != null) {
        this.Parse(content.split(eol));
        this.LoadBasis();
      }
    }

    SassaFrazConfig.prototype.Parse = function(lines) {
      var keyword, _i, _len, _ref, _results;
      _ref = this.keywords;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyword = _ref[_i];
        _results.push(this.ParseKeywordSection(keyword, lines));
      }
      return _results;
    };

    SassaFrazConfig.prototype.CleanKeyword = function(keyword) {
      return keyword.replace(":", "").replace("-", "_");
    };

    SassaFrazConfig.prototype.ParseKeyValue = function(keyword, property, lines, separator, key, value) {
      var is_key_value, keywordline, line, list, obj, parsing, parts, trimline, _i, _len;
      if (separator == null) {
        separator = ",";
      }
      if (key == null) {
        key = "selector";
      }
      if (value == null) {
        value = "base";
      }
      is_key_value = key === "key" && value === "value";
      list = this[property];
      parsing = false;
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        trimline = line.trim();
        keywordline = this.keywords.indexOf(trimline) > -1;
        if (!parsing && trimline === keyword) {
          parsing = true;
        } else if (parsing && !keywordline && trimline !== "" && trimline[0] !== "#") {
          parts = line.split(separator);
          if (parts.length === 2) {
            obj = {};
            if (is_key_value) {
              list[parts[0].trim()] = parts[1].trim();
            } else {
              obj[key] = parts[0].trim();
              obj[value] = parts[1].trim();
              list.push(obj);
            }
          }
        } else if (parsing && keywordline) {
          break;
        }
      }
      return list;
    };

    SassaFrazConfig.prototype.ParseKeywordSection = function(keyword, lines) {
      var k, key, keywordline, line, list, parsing, property, trimline, val, _i, _len;
      property = this.CleanKeyword(keyword);
      k = keyword;
      this.separator = k === "based-on:" ? "<" : k === "pages:" ? ">" : k === "settings:" ? "=" : "";
      if (this.separator !== "") {
        key = k === "pages:" ? "url" : k === "settings:" ? "key" : void 0;
        val = k === "pages:" ? "sass" : k === "settings:" ? "value" : void 0;
        return this[property] = this.ParseKeyValue(keyword, property, lines, this.separator, key, val);
      }
      list = this[property];
      parsing = false;
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        trimline = line.trim();
        keywordline = this.keywords.indexOf(trimline) > -1;
        if (!parsing && trimline === keyword) {
          parsing = true;
        } else if (parsing && !keywordline && trimline !== "" && trimline[0] !== "#") {
          list.push(line.trim());
        } else if (parsing && keywordline) {
          break;
        }
      }
      return this[property] = list;
    };

    SassaFrazConfig.prototype.LoadBasis = function() {
      var css_base, _i, _len, _ref, _results;
      _ref = this.css_bases;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        css_base = _ref[_i];
        _results.push(this.LoadBase(css_base));
      }
      return _results;
    };

    SassaFrazConfig.prototype.LoadBase = function(path) {
      var base, content, definition, f, _ref;
      if (!fs.exists(path)) {
        f = fs.open(path, "w");
        f.write(".css {\n}");
        f.close();
      }
      f = fs.open(path, "r");
      content = f.read();
      f.close();
      _ref = this.GetCSSDefinitions(content);
      for (base in _ref) {
        definition = _ref[base];
        this.bases[base] = definition;
      }
      return this.bases;
    };

    SassaFrazConfig.prototype.Merge = function(definition, previous) {
      var next;
      if (previous == null) {
        previous = "";
      }
      next = previous;
      if (-1 < previous.indexOf(definition)) {
        return previous;
      }
      next += definition;
      return next;
    };

    SassaFrazConfig.prototype.GetCSSDefinitions = function(content) {
      var base, based_on, based_on_base, css_def_regex, css_regex, def, defs, _i, _j, _len, _len1, _ref, _ref1;
      defs = {};
      _ref = this.based_on;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        based_on = _ref[_i];
        based_on_base = based_on.base.replace(/(\.)/g, function(match) {
          return match = "\\\.";
        });
        _ref1 = based_on_base.split(",");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          base = _ref1[_j];
          css_regex = new RegExp("" + (base.trim()) + "\\s*\\{\\s*([a-zA-Z0-9-_:;\\s\\$\\(\\)\\,\\.]*)\\}\\s*", "g");
          css_def_regex = new RegExp(".\\{([a-zA-Z0-9-_:;\\s\\$\\(\\)\\,\\.]*)\\}*", "g");
          if (def = content.match(css_regex)[0]) {
            if (def = def.match(css_def_regex)[0].trim().replace("{", "").replace("}", "")) {
              def = this.Merge(def, defs[based_on.selector]);
              defs[based_on.selector] = def;
            }
          }
        }
      }
      return defs;
    };

    SassaFrazConfig.prototype.Debug = function() {
      var keyword, property, _i, _len, _ref;
      _ref = this.keywords;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyword = _ref[_i];
        property = this.CleanKeyword(keyword);
        console.log("\n" + keyword + "\n" + (JSON.stringify(this[property])));
      }
      return console.log("\n");
    };

    return SassaFrazConfig;

  })();

  exports.create = function(path) {
    return new SassaFrazConfig(path);
  };

}).call(this);
