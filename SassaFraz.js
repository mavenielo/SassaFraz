// Generated by CoffeeScript 1.4.0
(function() {

  exports.create = function(config_path, death_callback) {
    var SassaFraz, fs, system;
    fs = require("fs");
    system = require("system");
    String.prototype.TrimLeft = function(charlist) {
      if (charlist == null) {
        charlist = "\s";
      }
      return this.replace(new RegExp("^[" + charlist + "]+"), "");
    };
    String.prototype.TrimLeft = function(charlist) {
      if (charlist == null) {
        charlist = "\s";
      }
      return this.replace(new RegExp("[" + charlist + "]+$"), "");
    };
    String.prototype.Trim = function(charlist) {
      if (charlist == null) {
        charlist = "\s";
      }
      return this.TrimLeft(charlist).TrimRight(charlist);
    };
    SassaFraz = (function() {

      SassaFraz.prototype.config = require("./SassaFrazConfig").create(config_path);

      SassaFraz.prototype.beatingHeart = null;

      SassaFraz.prototype.loadCount = 0;

      SassaFraz.prototype.pages = [];

      SassaFraz.prototype.busy_frazzling = false;

      SassaFraz.prototype.imports_output = [];

      SassaFraz.prototype.hierarchies = {};

      SassaFraz.prototype.rooted = {};

      SassaFraz.prototype.outputs = {};

      function SassaFraz(path) {
        var death, pulse, _this;
        _this = this;
        this.config.Debug();
        pulse = function() {
          return _this.CheckPulse();
        };
        death = function() {
          return death_callback(_this);
        };
        this.beatingHeart = require("./BeatingHeart").create(pulse, death);
        this.LoadPages();
      }

      SassaFraz.prototype.CheckPulse = function() {
        if (this.buzy_frazzling) {
          console.write(".");
        }
        return !this.LastBreath();
      };

      SassaFraz.prototype.LastBreath = function() {
        return this.AllPageLoaded() && this.HasFrazzled();
      };

      SassaFraz.prototype.HasFrazzled = function() {
        if (!this.AllPageLoaded() || this.busy_frazzling) {
          return false;
        } else {
          return this.Frazzle();
        }
      };

      SassaFraz.prototype.Frazzle = function() {
        var file, hierarchy, identifier, _i, _len, _ref, _ref1, _results;
        this.busy_frazzling = true;
        console.log("\nFrazzelling ...");
        _ref = this.config["import"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          this.imports_output.push("@import '" + file + "';\n");
        }
        _ref1 = this.hierarchies;
        _results = [];
        for (identifier in _ref1) {
          hierarchy = _ref1[identifier];
          console.log("\n" + identifier);
          _results.push(this.Traverse(identifier, hierarchy));
        }
        return _results;
      };

      SassaFraz.prototype.PrintTo = function(i, string) {
        return this.outputs[i].push(string);
      };

      SassaFraz.prototype.Traverse = function(index, node, indent) {
        var key, linefeed, thin_key, value, _indent;
        if (index == null) {
          index = -1;
        }
        if (indent == null) {
          indent = "";
        }
        for (key in node) {
          value = node[key];
          thin_key = key.trim();
          _indent = indent;
          if (thin_key !== "") {
            this.PrintTo(index, "" + indent + key + " {");
            this.PrintBase(key, index, indent);
            _indent = "	" + indent;
          }
          this.Traverse(index, value, _indent);
          if (thin_key !== "") {
            linefeed = indent === "" ? "\n" : "";
            this.PrintTo(index, "" + indent + "}" + linefeed);
          }
        }
        return true;
      };

      SassaFraz.prototype.PrintBase = function(key, index, indent) {
        var base, definition, found, k, keys, line, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        keys = [];
        _ref = key.split(",");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          keys = keys.concat(k.trim().replace(new RegExp("^[\.]+"), "").split(new RegExp("[\.#]+")));
        }
        console.log("" + indent + " - " + (JSON.stringify(keys)));
        found = false;
        _ref1 = this.config.bases;
        for (base in _ref1) {
          definition = _ref1[base];
          if (!(!-1 < keys.indexOf(base.replace(new RegExp("^[\.]+"), "")))) {
            continue;
          }
          _ref2 = definition.split("\n");
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            line = _ref2[_j];
            if (line.trim() !== "") {
              this.PrintTo(index, "" + indent + "	" + (line.trim()));
            }
          }
          return;
        }
      };

      SassaFraz.prototype.IsRooted = function(full_selectors) {
        var full_selector, part, rooted_selector, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        _ref = full_selectors.split(",");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          full_selector = _ref[_i];
          _ref1 = full_selector.trim().split(".");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            part = _ref1[_j];
            _ref2 = this.config.rooted_selectors;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              rooted_selector = _ref2[_k];
              if (rooted_selector.replace(new RegExp("^[\.]+"), "") === part) {
                return true;
              }
            }
          }
        }
        return false;
      };

      SassaFraz.prototype.Process = function(webpage, identifier) {
        webpage.injectJs('jquery-2.1.0.min.js');
        webpage.injectJs('SassaFrazzlerClient.js');
        this.outputs[identifier] = [];
        return this.hierarchies[identifier] = webpage.evaluate("function () {\n	return (new SassaFrazzlerClient(" + (JSON.stringify(this.config)) + ")).GetFullPageHierarchy();\n}");
      };

      SassaFraz.prototype.AllPageLoaded = function() {
        return this.loadCount === this.config.pages.length;
      };

      SassaFraz.prototype.LoadPages = function() {
        var page, _i, _len, _ref, _results;
        _ref = this.config.pages;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          page = _ref[_i];
          _results.push(this.LoadPage(page));
        }
        return _results;
      };

      SassaFraz.prototype.LoadPage = function(page) {
        var is_mustache, url, webpage, _this;
        _this = this;
        webpage = require('webpage').create();
        this.pages.push(webpage);
        console.log("Loading " + page.url);
        is_mustache = -1 < page.url.indexOf(".mustache");
        url = is_mustache ? "skeleton.html" : page.url;
        return webpage.open(url, function(status) {
          var content, f;
          if (is_mustache) {
            console.log("Mustache file");
            f = fs.open(page.url, "r");
            content = f.read();
            f.close();
            webpage.setContent(content, page.url);
          }
          console.log("Loaded " + page.url);
          _this.Process(webpage, page.url);
          return _this.loadCount++;
        });
      };

      SassaFraz.prototype.SaveToFiles = function() {
        var i, page, _i, _len, _ref, _results;
        _ref = this.config.pages;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          page = _ref[i];
          _results.push(this.SaveToFile(page, i));
        }
        return _results;
      };

      SassaFraz.prototype.SaveToFile = function(page, i) {
        var content, f, imports, output, output_list, overwrite, path, plus_index, prepend;
        if (i == null) {
          i = -1;
        }
        output_list = this.outputs[page.url];
        output = output_list.join("\n");
        plus_index = page.sass.indexOf("+");
        content = "";
        path = page.sass.replace("+", "");
        imports = this.imports_output.join("") + "\n";
        overwrite = true;
        prepend = false;
        if (-1 < plus_index) {
          content = fs.read(path);
          overwrite = false;
          if (plus_index === 0) {
            prepend = true;
          } else {
            prepend = false;
          }
          if (-1 < content.indexOf(imports)) {
            content = content.replace(imports, "");
          }
        }
        f = fs.open(path, "w");
        f.write(imports + (overwrite ? output : prepend ? output + "\n" + content : content + "\n" + output));
        f.close();
        return console.log("" + path + " : Saved");
      };

      return SassaFraz;

    })();
    return new SassaFraz();
  };

}).call(this);
